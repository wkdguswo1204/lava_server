# day 03

내장객체   
    ==> 자주 사용하는 클래스 중 몇가지는 JSP 내부에서 미리 new 를 시켜서
        사용할 수 있도록 준비해 놓은 것이다.
        따라서 이것은 new 시킬 필요 없이 필요할 때 사용할 수 있는 클래스를
        내장 객체라 부른다.

    종류 ]
        1. out
            ==> PrintWriter 클래스를 미리 new 시켜놓은 내장 객체

            즉,
                PrintWriter out = new PrintWriter();

            이 클래스의 역할은 클라이언트에게 응답하는 문서를 작성하도록 하는 기능이다.

            <%= %> 과 동일한 기능이다.

            주요함수
                writer()
                flush()

            PrintWriter 는 JSPWriter 클래스로 변환되어서 new 된 경우이다.

        참고 ]
            따라서 내장 객체는 결국 클래스를 사용하는 것이다.
            그 클래스 안에 원하는 함수가 어떤 것이 있는지 파악하는 것이 중요하다.

        2. request
            ==> 클라이언트의 요청 정보를 관리하는 내장 객체
                즉, 요청한 클라이언트의 IP주소, 요청내용, 부가정보를 알고 싶은 경우
                사용하는 내장 객체

            HttpSevletRequest 를 이용해서 만들어진 내장객체

            주요함수 ]
                ==> 서버 측에서 클라이언트가 준 부가 정보를 알아내는 함수

                사용 형식 ]
                    String xxx = getParameter("키값");
                    문제점 : 부가정보는 오직 문자열로만 받을 수 있다.

                    getParameterValues()
                        사용형식 ]
                        String[] xxx = getParameterValues("키값);

        참고 ]
            클라이언트가 서버에게 요청하는 방법
                1) GET방식
                    ① 주소칸에 직접 입력해서 요청하는 방버  
                    ② <a> 태그를 이용해서 요청하는 방법
                        ==> javascript의 경우 : location.href = "경로?키값=데이터&키값=데이터...";
                        ==> jquery의 경우     : $(location).attr('href','주소?키값=데이터&키값=데이터);
                        ==> form 태그를 사용해서 전송하는 경우
                        method="GET" action="주소" ===> 하위에 입력 태그를 만들고 name 속성을 줘서 전송하는 경우

                    참고 ]
                        GET방식으로 요청할 때 부가 정보를 같이 줄 수 있다.
                        예를 들어 게시판 목록보기를 할 때
                        몇페이지를 보여주세요... 라고 요청할 수 있다.

                        형식 ]
                            <a href="요청문서?키값=데이터&키값=데이터&....">내용</a>
                        주의사항 ]
                            ?, =, & 앞뒤에는 절대로 공백이 있어서는 안된다.

                    참고 ]
                        GET방식은 요청 내용이 주소표시줄에 나타나기 때문에 보안에 취약한 단점이 있다.

                    참고 ]
                        부가 정보에 한글이 들어가면 서버 측에서 받을 수 없는 경우가 생긴다.
                        한글이 깨져서 나온다....
                        
                        해결방법 ]
                            1. 그 문서에서만 해결하는 방법
                                ==> 해당 문서 안에서
                                <%
                                    request.setCharacterEncoding("UTF-8");
                                %>

                            2. 모든 문서에서 해결하는 방법
                                server.xml 파일에서

                                <Connector 태그의 마지감 부분에
                                    URIEncoding="UTF-8"
                                을 추가해 놓는다.

                2) POST방식
                    1) form을 제작해서 요청하는 방법
                        ==> 로그인 폼과 같이 사용자가 필요한 것을 입력 혹은 선택해서
                            서버에게 전달하는 방식

                        ***
                        특징 ]
                            반드시 <form> 태그 안에 만들어야 한다.
                            만약 어떤 폼이 <form> 태그 안에 있지 않으면
                            그 내용은 서버에 전달되지 않는다.

                        ***
                        특징 ]
                            서버에서는 전달되는 데이터를 받아야 하는데...
                            이 때 입력태그의 name 속성값을 키값으로 해서 받게 된다.
                            따라서
                            입력태그를 만들 때는 반드시 name 속성을 지정해 줘야 한다.

                        ***
                        참고 ]
                            이 때 우리는 반드시 이 폼에 전달할 도구를 준비한다.
                            이 도구를 우리는 전문용어로 submit(제출) 도구라고 한다.
                            
                            제출 도구 만드는 방법
                                1. html 방식으로 만드는 방법
                                    <input type="submit" value="제출">
                                    ==> 모양은 버튼 형식으로 만들어지고
                                        이 버튼을 누르면 입력태그에 입력한 내용이
                                        이 버튼을 감싸고 있는 <form> 태그 안에 있다면
                                        그 입력태그들은 모두 서버에게 제출된다.

                                2. javascript 방식으로 만드는 방법
                                    <script>
                                        var frm = 폼태그 알아내고;
                                        frm.submit();
                                    </script>

                                3. jquery 방식으로 만드는 방법
                                    <script>
                                        $(document).ready(function(){
                                            $(폼태그선택).submit();
                                        });
                                    </script>
                        참고 ]
                            중요 속성
                                method : 폼의 데이터를 서버에게 보내는 방법.GET 또는 POST 중 하나를 선택하면 된다.
                                action : 서버가 받을 문서이름

                        참고 ]
                            POST방식은 스트림을 이용해서 서버에게 전달하게 되므로
                            주수표시줄에 그 내용이 나오지 않게 된다.
                            따라서 GET방식보다는 보안에 조금 더 유리하다.

                    참고 ]
                        POST 방식으로 주는 데이터의 한글 깨짐 방지 방법
                        서버가 필터링을 이용해서 인코딩 해줘야 한다.
                        
                        방법 ]
                            server의 web.xml 파일을 열고

                            1. 필터를 등록하고
                                <filter>
                                    <filter-name> 사용할 필터 이름 </filter-name>
                                    <filter-class> en.filter.EncodingUtil</filter-class>
                                    ==> 필터링에 사용할 클래스를 지정하는 부분
                                    <init.param>
                                        <param-name></param-name>
                                        <param-value>UTF-8</param-value>
                                    </init.param>
                                </filter>
                                ==> 이 부분을 찾아서 주석 해제를 해준다.
                                
                            2. 필터를 적용시킨다.
                                <filter-mapping>
                                    <filter-name>필터태그에서 만든 필터이름을 기술</filter-name>
                                    <url-pattern>/*</url-pattern>
                                    ==> 어떤 요청이 있는 경우 필터링을 사용할지 등록하는 부분
                                        우리는 /* 로 처리가 되어있고
                                        이것은 서버로 오는 모든 요청을 필터태그에서 만든 필터로 적용시키게 된다.
                                </filter-mapping>
                                ==> 이 부분을 찾아서 주석 해제를 해준다.
                            참고 ]
                                만약 같은 폼 안에 같은 name이 여러 개 존재하는 경우에는
                                모든 데이터가 배열 형식으로 전달되어진다.

                                특히, 체크상자의 경우 선택, 취소로 서버에 가는 것으로 착각하는 경우가 있는데
                                그렇게 처리되는 것이 아니고
                                선택된 태그만 데이터가 전송이 된다.
        3. response
            ==> 서버가 클라이언트에게 응답하는 정보를 관리하는 내장객체

                HttpServletResponse 라는 클래스를 이용해서 만들어진 내장 객체

                주요 함수 ]
                    sendRedirect()
                    ==> 서버 측에서 강제로 클라이언트의 요청을 변경하는 명령
                        즉, 클라이언트는 a라는 페이지를 요청을 했는데
                        서버 측에서 강제로 b라는 페이지로 응답하도록 하는 방법

                        예를 들면
                        회원가입 처리의 경우
                        이 기능은 데이터베이스에 정보를 입력하는 기능에 해당된다.
                        그 기능 이외의 다른 페이지가 보여지는 기능은 없다.

                        이 때, 회원가입 처리가 끝난 후 어떤 페이지를 보여줘야 될지가 문제인데
                        일반적으로 서버에서 강제로 로그인 페이지나 메인 페이지로 요청을 바꿔서
                        응답을 해주게 된다.
                        이렇게 서버에서 클라이언트의 요청과는 무관하게 강제로 요청을 만들어서
                        클라이언트에게 응답하는 방식이 Redirect 방식

            참고 ]
                서버가 요청을 바꾸는 방법
                    1. sendRedirect
                        ==> 클라이언트의 요청 정보를 모두 지우고 완벽하게 새로운 요청을 처리하는 방식

                            따라서 처음 클라이언트가 보낸 정보는 모두 지워지게 된다.

                            새로고침을 하면 마지막 요청부터 시작한다.
                            즉, 서버가 교체한 요청부터 시작한다.

                    2. forward
                        ==> 클라이언트의 요청 정보를 유지한 상태에서
                            화면에 보이는 문서만 교체해서 보여주는 기법이다.

                            따라서 클라이언트가 준 정보가 그대로 남아있는 상태
                            새로고침을 하게 되면 처음부터 다시 시작하게 된다.
                            즉, 클라이언트가 요청한 요청부터 처리하게 된다.
        *
        4. session
            ==> 세션을 관리하는 내장객체

            HttpSession 이라는 클래스를 이용해서 만들어진 내장 객체

        5. application
            ==> 서버 전체를 관리하는 내장 객체

            ServletContext 라는 클래스를 이용해서 만들어진 내장 객체

        6. page
            ==> 해당 문서 자체를 관리하는 내장 객체

            pageContext 라는 클래스를 이용해서 만들어진 내장 객체

------------------------------------------------------------------------------------------------------

액션태그
    ==> JSP는 HTML 언어를 기반으로 해서
        필요한 위치에 자바코드를 스크립트 하는 방식으로 만들어지는 언어다.
        그러다보니
        HTML 은 태그를 중심으로 제작되고
        자바코드는 <% %> 를 사용해서 처리하므로 조금은 불편함이 있다.

    자주 사용하는 자바적인 기능을 HTML처럼 (태그방식) 사용할 수 있도록
    만들어 놓은 보조적인 명령을 말한다.

    1. forward를 대신하는 액션 태그

        형식 1 ]
            <jsp:forward page="대신 응답할 응답 문서 이름" />
            ==> 단순히 보여줄 페이지만 변경하는 것.

        형식 2 ]
            <jsp:forward page="대신 응답할 문서이름">
                <jsp:param name="키값" value="데이터" scope="xxxx" />
            </jsp:forward>
            ==> 보여줄 페이지를 변경하면서 부가 정보를 알려준다.

    *
    참고 ]
        액션태그는 XHTML을 기반으로 제작된 태그이다.
        따라서몸체가 있는 태그는
            <태그이름>

            </태그이름>
        몸체가 없는 태그는
            <태그이름       />

    *
    2. 다른 문서를 포함시키는 기능을 가진 액션 태그는
        (% include file="xxxx" %> 과 비슷한 역할을 하는 태그)

        형식 ]
            <jsp:include page="합칠 문서 이름" />

        주의 ]
            <% include file=" " %>
            ==> 소스코드를 먼저 합치고 컴파일을 한다.
                따라서 합쳣을 때 충돌이 나지 않도록 주의 해야 한다.

            <jsp:include page="" />
            ==> 각각을 클래스로 만들어서 실행한 후
                실행 결과만 합치게 된다.
                따라서 따로 컴파일이 되므로 충돌이 날 염려가 없다.
                
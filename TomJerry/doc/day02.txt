# day02

JSP 구조

    JSP는 응답 문서(HTML) 만들기 위한 언어의 일종이다.

    따라서 기본 구조는 HTML 문서가 중심이 된다.
    그리고 그 가운데 필요하면 자바 소스코드가 포함될 수 있다.
    따라서 결론적으로 JSP는 자바 소스코드를 포함할 수 있는 스크립트 언어..

    HTML과 차이점
    HTML은 서버 측에서 실행이 불가능하고 오직 클라이언트 측에서(웹 브라우저에서만) 실행이 가능한 언어이다.
    ==> 단지 이미 준비된 문서를 단순히 응답하는 것 뿐이고
        문서의 내용을 변형시킬 수 없다.

    JSP는 서버 측에서 실행을 할 수 있는 언어이다.
    ==> 요청이 올 때마다 서버 측에서 실행을 해서
        새로운 HTML 문서를 제작할 수 있다.

JSP 구조에서 반드시 알아야 할 내용
    ==> 자바 소스코드를 어떤 방식으로 HTML 문서 내부에 포함시키느냐???

    지시자
    ==> JSP 문서의 특성이나 처리방식을 지시하는 명령을 말한다.

        형식 ]

            <%@ 명령어 속성=값 속성=값 ... %>

        명령어 종류

            page    문서 자체의 특성이나 처리 방식을 지시하는 명령
            include 문서 안에 다른 문서를 포함하도록 지시하는 명령
            taglib  사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령

        1) page 명령
            ==> 지금 만들고 있는 문서 자체에 특성이나 처리 방식을 지시하는 명령

                형식 ]
                <%@ page 속성=값 속성=값 ...%>

                참고 ]
                    속성이란?
                        지정하고 싶은 특성이나 처리 방식에 대한 예약된 단어
                    값이란?
                        그 특성이나 처리 방식에 대한 내용

                속성 종류 ]
                    1) language
                        ==> 스크립트할 언어의 종류를 지정하는 속성
                        지금까지는 오직 자바 언어만 허락하는 상태
                        생략하면 자동으로 자바 언어를 스크립트 해준다.

                        예 ]
                            <% page language="java" %>      ==> <%@ page %>

                    2) extends
                        ==> JSP는 실행을 하면 내부적으로 자바 클래스로 바꿔서 실행하도록 되어 있다.
                            (즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
                            ASP, PHP 보다 실행 속도가 빠르다는 장점을 가지고 있다.)

                            이 때, 중간에서 만들어지는 클래스가 어떤 클래스를 상속받아서 만들지를 지정하는 속성이다.
                            
                            이미 JSP문서가 클래스로 변환될 때 HttpJspBase 클래스를 상속 받도록 약속을 해 놓았다.
                            자바는 다중 상속이 불가능하므로 필요하지 않는 속성이다.
                            
                            예 ]
                                public class Jerry extends Rat, sulchi {} ==> X

                                public class Jerry extends Rat {}         ==> O

                            예 ]
                                <%@page extends="javax.servlet.jsp.HttpJspBase" %>

                    3) import
                        ==> 스크립트 안에 자바 소스코드를 넣을 수 있는데
                            이 때 사용하는 자바 소스코드가 특정 패키지 소속이면
                            자바와 동일하게 반드시 import 시켜야 한다.
                            그 작업을 해주는 속성

                            예 ]
                                <%page import="java.util.*, java.text.*" %>

                    4) session
                        ==> 세션의 사용 여부를 판단하도록 하는 속성
                            생략하면 세션을 사용하도록 한다. (기본이 true)

                        예 ]
                            <%@ page session="true" %>

                    5) buffer
                        ==> 내부적으로 버퍼를 사용할지 여부와
                            버퍼의 크기를 얼마로 할지 여부를 지정하는 속성
                            생략하면 기본적으로 8KB를 버퍼로 사용하도록 해준다.

                            예 ]
                                <%@ page buffer="none" %>
                                ==> 버퍼를 사용하지 않겠다는 선언

                                <%@page buffer="24k" %>
                                ==> 버퍼의 크기를 24KB로 지정해서 사용

                        참고 ]
                            버퍼??
                                클라이언트에게 서버가 응답을 할 때 처리 속도를 빠르게 하기 위해서
                                중간에 버퍼를 사용해서 데이터를 모았다가 한꺼번에 출력하는 임시저장소의 개념

                    6) autoFlush
                        ==> 자동 flush 기능을 사용할지 여부를 지정하는 속성
                            생략하면 true로 설정이 되서 자동 flush 기능이 실행이 된다.

                            예 ]
                                <%@ page autoFlush="true" %>

                            참고 ]
                                만약에 flase 로 지정하면
                                강제로 반드시 flush 시켜 주어야 한다.

                    7) isThreadSafe
                        ==> Thread 처리를 할 때 동기화 처리 여부를 판단하는 속성
                            생략하면 자동 동기화 처리를 하도록 설정된다.

                        예 ]

                            <%@ page isThreadSafe="true" %>

                        참고 ]
                            JSP는 모든 순서가 자동 스레드 처리가 된다.
                            즉, 여러 클라이언트가 동시에 접속을 하더라도
                            스레드 처리를 해서 응답하도록 되어 있다.

                    8) info
                        ==> 주석문에 해당하는 것으로
                            실행에는 아무런 상관이 없고 다만
                            문서에 대한 정보(주석)을 달고 싶을 때 사용하는 속성

                        예 ]
                            <%@ page info="성현씨가 대답하는 문서... %>

                    9) errorPage
                        ==> JSP 문서를 실행하는 도중 문제(exception)가 발생하면 그 문서로는 응답할 수 없다.
                            따라서 대신 응답할 다른 문서를 지정하는 속성

                        예 ]
                            <%@ page errorPage="myError.jsp" %>
                            ==> 에러가 발생하면 이 문서 대신 myError.jsp로
                                클라이언트에게 응답하세요. 라는 의미...
                    *
                    10) isErrorPage
                        ==> 지금 만들고 있는 문서가 에러 페이지용 문서인지를 지정하는 속성

                        예 ]
                            <%@ page isErrorPage="true" %>
                    *
                    11) contentType
                        ==> 실행결과의 응답방식을 지정하는 속성
                            참고 ]
                                실행 결과 탄생하는 문서의 종류를 지정할 수 있다.
                                이 때 응답 문서의 종류는 MIME Type으로 지정해야 한다.

                            예 ]
                                <%@ page contentType="text/html" %>
                                ==> 응답 문서의 종류를 html 문서로 만들어 주세요...

                            참고 ]
                                이 속성에는 한글 인코딩 방식도 같이 지정할 수 있다.

                                형식 ]
                                    <%@ page contentType="Text.html; charset="UTF-8" %>

                            참고 ]
                                이 속성은 매우 중요한 속성으로
                                생략하면 일반 text 파일로 응답하게 된다.
                                따라서 거의 반드시 지정해야 하는 유일한 속성이다.

                    12) pageEncoding
                        ==> 한글 인코딩 방식을 지정하는 속성

                            예 ]
                                <%@ page pageEncoding="UTF-8" %>

                            참고 ]
                            contentType에서 한글 인코딩 방식을 지정할 수 있으므로 생략해도 무방하다.

-----------------------------------------------------------------------------------------------------
참고 ]

    폴더를 만드는 규칙
        Java Resource
            ==> 이 폴더는 자바 클래스 소스가 위치해야 할 폴더이므로
                폴더의 개념보다는 패키지의 형태로 만들어야 한다.
        WebContent
            ==> 웹 문서들이 위치하는 폴더가 된다.
                따라서 필요한 폴더를 폴더개념으로 반들면 된다.

-----------------------------------------------------------------------------------------------------

    2) include
        ==> 다른 문서를 현재 파일에 포함시키는 기능을 가진 명령어
            따라서 하나의 파일로 만드는 기능

        형식 ]
            <%@ include file="합칠파일이름" %>

        참고 ]
            우리가 웹 문서를 만들다 보면 여러 페이지에 같은 내용이 중복되어서 들어가는 경우가 많이 있다.

            하지만 원칙적으로는 JSP 문서가 만든 결과를 응답하기 때문에 (HTML문서 하나만 응답한다.)
            각 문서마다 동일한 내용이라도 다시 써주는 것이 원칙이다.

            매번 이런 불편함을 조금이나마 덜기 위한 방법으로 제시된 명령어

        결론 ]
            자주 사용되는 내용은 따로 만들어놓고
            응답 문서에 따로 만들어진 파일을 합쳐서 하나의 문서로 만드는 방법이

        ***
        주의사항 ]
            이 작업은 먼저 코드를 합치고(하나의 문서로 만들고) 그 이후 컴파일을 한다.(.class)
            만약 먼저 합쳣을 때 문제가 생기면 (충돌이 나면) 에러가 발생한다는 사실을 반드시
            ***
            명심하세요.

-----------------------------------------------------------------------------------------------------

스크립트 방식 ]
    ==> JSP는 HTML 언어가 기본이 되고 필요하면 자바 코드를 필요한 위치에 삽입하여 같이 실행하는 문서다.
        이처럼 다른 언어에 포함하여 처리하는 방식을
        스크립트 방식이라고 하면
        JSP 문서에 자바 코드를 삽입하는 방식은 다음 3가지가 있다.

        1. 스크립트 릿 방식
            ==> 일반적인 자바 언어를 포함하는 방식을 의미한다.
                이곳에 기록한 모든 내용은 service 함수 안에 포함된다.
                따라서 이곳은 결국 지역적인 역할을 한다.

                참고 ]
                    JSP 문서는 여러 문서가 같이 실행되는 것이 아니고
                    클라이언트가 요청한 문서 하나만 실행되므로
                    클래스가 연결되어서 실행되는 경우는 거의 없다.
                    결론적으로 main 함수만 있으면 충분하게 그 역할을 하게 된다.

                참고 ]
                    JSP 문서는 실행을 하면 먼저 자바 클래스로 변환하고
                    그것을 실행하는 방식이다.
                    이런 클래스를 우리는 서블릿 클래스(servlet Class)라고 부른다.
                    이 때 이것 역시 자바의 main 함수처럼 시작 함수가 존재하는데
                    그 함수 이름을 service 함수라고 부른다.

                형식 ]

                    <%
                        자바 소스코드
                    %>

                참고 ]
                    스크립트 릿 속에 있는 HTML 내용은
                    같이 service 함수에 코딩이 된다.
                    따라서 두 가지는 혼용해서 사용할 수 있다.
                    다만 자바 소스 코드와 HTML 태그만 구분을 해주면 된다.

        2. 선언자 방식
            ==> JSP service 함수 안에서 모든 것이 실행된다.
                하지만 가끔은 전역변수나 함수가 필요한 경우가 발생할 수 있는데
                그 때 전역변수와 함수를 만드는 방식

            결론 ]
                전역변수와 함수를 만드는 기능을 가진 스크립트 방식
                ***
                이 안에서는 일반적인 명령은 사용할 수 없다.

            형식 ]
                <%!
                    변수선언;
                    함수제작
                %>

        3. 표현자 방식
            ==> System.out.println()과 같이
            자바적인 요소(변수, 함수)를 사용해서 화면에 내용을 출력하기 위한 스크립트

            형식 ]
                <%= 출력내용 %>

            주의 사항 ]
                출력내용이 오직 한 개만 출력할 수 있다.
                이것은 System.out.println()도 마찬가지다.
                ==> 문자열 결합을 이용해서 하나의 문자열로 바꾸어 출력하는 방식을 사용해야 한다.

참고 ]
    주석문
        1. 확장자가 html인 문서(HTML)에서는
            <!-- --> 의 방식으로 주석문을 달 수 있다.
        
        2. 확장자가 JSP인 문서(JSP)문서에서는
            1) html 요소부분
                <%-- --%>   의 방식을 주석문을 달 수 있다.

            2) 자바 소스코드 부분
                //
                /*  */ 의 방식을 주석문으로 사용할 수 있다.
